import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;


public class DisplaySudokuOutput {

	/*
	 * The class DisplaySudokuOutput takes as a parameter full name(including path) of the file 
	 * generated by minisat containing the solution to the sudoku problem and Size of the grid
	 * Here, as the homework specification, the size of grid is 9. Then this class generates the 
	 * sudoku instance for the given model.
	 */
	public static void main(String[] args) {
		String sudokuAnswerFileName = args[0];
		int gridSize = Integer.parseInt(args[1]);
		String satOrUnsat = "";
		try {
			//open the file based on the path given as argument to the main function
			BufferedReader answerReader = new BufferedReader(new FileReader(sudokuAnswerFileName));
			satOrUnsat = answerReader.readLine();
			
			// If 1st line of the answer file is UNSAT then display no solution
			if(satOrUnsat.trim().equalsIgnoreCase("UNSAT"))
			{
				System.out.println("No Solution for the given sudoku instance");
			}
			// Otherwise display the sudoku instance
			else
			{
				System.out.println("A Solution is available for the given sudoku instance");
				displaySudoku(answerReader,gridSize);
			}
			answerReader.close();
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		
	}

	private static void displaySudoku(BufferedReader answerReader, int grid) {
		try {
			// Read the next line which contains the satisfying sudoku instance
			String line = answerReader.readLine();
			// Remove unnecessary front and back spaces
			line = line.trim();
			// Remove all the spaces in between the numbers with commas
			line = line.replace(" ", ",");
			// Split the single string by commas and put all the contents into and array
			String[] array = line.split(",");
			// An arraylist to contain all the positive elements from the result
			ArrayList<Integer> sudokuResult = new ArrayList<Integer>();
			for(int i=0;i<array.length-1;i++)
			{
				// As only the positive elements consist the result they are inserted into the arraylist
				if(Integer.parseInt(array[i])> 0)
				{
					sudokuResult.add(Integer.parseInt(array[i]));
				}
			}
			// Create a 9*9 array for displaying the sudoku elements
			int[][] sudokuDisplay = new int[grid][grid];
			int row = 0;
			int column = 0;
			// For all the N*N = 81 elements, they are divided into a group of 9 elements
			// For each element of each group, appropriate value for each cell is calculated
			// Using the formula, sudoku[row][column] = answer_from_minisat - (grid*(grid*row+column))
			// As for each cell there are 9 (grid) possible values and values are placed in cnf
			// using the formula grid*(grid*row+column)+ (value of each cell(ranging from 1 to 9(grid)))
			for(int i=0;i<sudokuResult.size();i+=grid)
			{
				column = 0;
				for(int j=i;j<i+grid;j++)
				{
					sudokuDisplay[row][column] = sudokuResult.get(j) - (grid * ((grid*row)+column));
					System.out.print(sudokuDisplay[row][column] + " ");
					column += 1;
					
				}
				System.out.println();
				row += 1;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}

}
